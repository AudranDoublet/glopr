vec2 bbox_uv(const vec3 boxMin, const vec3 intersection, const int face) {
    const vec3 r = intersection - boxMin;
    return (face == 0 || face == 3) ? vec2(r.z, 1 - r.y)
        : (face == 1 || face == 4) ? vec2(r.x, 1 - r.z)
        : vec2(r.x, 1 - r.y);
}

float BBoxRayIntersects(const vec3 boxMin, const vec3 boxMax, const Ray r, out int face) {
    const vec3 tbot = r.direction_inv * (boxMin - r.origin);
    const vec3 ttop = r.direction_inv * (boxMax - r.origin);
    vec3 tmin = min(ttop, tbot);

    float t1 = tmin.x;
    face = 0 + 3 * int(tbot.x < ttop.x);

    if (tmin.y > t1) {
        t1 = tmin.y;
        face = 1 + 3 * int(tbot.y < ttop.y);
    }

    if (tmin.z > t1) {
        t1 = tmin.z;
        face = 2 + 3 * int(tbot.z < ttop.z);
    }

    return t1;
}

bool quadrilater_intersects(int tex, const vec3 pos, const vec3 edge1, const vec3 edge2, const Ray r, out float t, out vec2 uv, out vec3 normal) {
    vec3 h = cross(r.direction, edge2);
    float a = dot(edge1, h);

    if (a > -0.0001 && a < 0.0001) {
        return false;
    }

    float f = 1.0 / a;
    vec3 s = r.origin - pos;
    uv.y = f * dot(s, h);

    if (uv.y < 0.0 || uv.y > 1.0)
        return false;

    vec3 q = cross(s, edge1);
    uv.x = f * dot(r.direction, q);

    if (uv.x < 0.0 || uv.x > 1.0)
        return false;

    uv.y = 1.0 - uv.y;
    t = f * dot(edge2, q);

    normal = cross(edge1, edge2);

    if (dot(normal, r.direction) > 0.0)
        normal = -normal;

    return t > 0.0 && texture_color(tex, uv, t / CST_TEXTURE_QUALITY_COEFF).a > 0.5;
}

bool plant_intersects(const vec3 block_pos, int tex, Ray ray, out float t, out vec2 uv, out vec3 normal) {
    float t2;
    vec2 uv2;
    vec3 normal2;

    bool v1 = quadrilater_intersects(tex, block_pos, in_uni_wind, vec3(1.0, 0.0, 1.0), ray, t, uv, normal);
    bool v2 = quadrilater_intersects(tex, block_pos + vec3(1.0, 0.0, 0.0), in_uni_wind, vec3(-1.0, 0.0, 1.0), ray, t2, uv2, normal2) && (!v1 || t2 < t);

    if (v2)
    {
        uv = uv2;
        t = t2;
        normal = normal2;
        return true;
    }

    return v1;
}

bool BBoxRayIntersectsUncertain(const vec3 boxMin, const vec3 boxMax, const Ray r, out int face, out float t) {
    const vec3 tbot = r.direction_inv * (boxMin - r.origin);
    const vec3 ttop = r.direction_inv * (boxMax - r.origin);

    const ivec3 faces = ivec3(0, 1, 2) + ivec3(3) * ivec3(lessThan(tbot, ttop));

    vec3 tmin = min(ttop, tbot);
    vec3 tmax = max(ttop, tbot);

    float t1 = tmin.x;
    face = faces.x;

    if (tmin.y > t1)
    {
        t1 = tmin.y;
        face = faces.y;
    }

    if (tmin.z > t1)
    {
        t1 = tmin.z;
        face = faces.z;
    }

    const float t2 = min(min(tmax.x, tmax.y), tmax.z);

    if (t1 > 0.0 && t1 < t2) {
        t = t1;
        return true;
    }

    return false;
}


bool isIntersectionCertain(uint block_type) {
    return block_type != 1 
        && block_type != 8
        && block_type != 7
        && block_type != 9
        && CST_BLOCK_MATERIALS[block_type].type != 3;
}

vec3 computeBlockOffsetTop(uint block_type) {
    return float(block_type == 1) * vec3(1, 0.9, 1)
        + float(block_type == 7) * vec3(0.9, 1.0, 0.9)
        + float(block_type == 8) * vec3(1, 0.1, 1);
}
vec3 computeBlockOffsetBot(uint block_type) {
    return float(block_type == 7) * vec3(0.1, 0, 0.1);
}
