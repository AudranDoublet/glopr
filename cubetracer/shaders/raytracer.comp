#version 430 core

/* ************************************************************
 * > -0- Types
 * ************************************************************/

struct VirtualScreen {
    vec3 top_left;
    vec3 left, up; // normalized and scaled left/up screen axes
};

/* ************************************************************
 * > -1- Inputs
 * ************************************************************/

uniform VirtualScreen in_uni_screen;
uniform int in_uni_iteration_id;

uniform vec3 in_uni_origin; // camera origin
uniform ivec2 in_uni_cl_min_coords; // chunks min coord in 

uniform ivec3 in_uni_highlighted_block;

uniform vec3 in_uni_wind;
uniform float in_uni_time;

uniform sampler2DArray in_uni_textures;

/* ************************************************************
 * > -3- Includes
 * ************************************************************/

#include cubetracer/shaders/hyperparameters.comp
#include cubetracer/shaders/block_data.comp
#include cubetracer/shaders/ray.comp
#include cubetracer/shaders/block_intersection.comp

/* ************************************************************
 * > -4- Data
 * ************************************************************/

struct ChunkData {
    uint blocks[CST_CHUNK_WIDTH*CST_CHUNK_WIDTH*CST_CHUNK_HEIGHT];
    float grass_color[CST_CHUNK_WIDTH*CST_CHUNK_WIDTH][3];
};

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (std430) readonly buffer shader_data {
    uint cl_chunks_mapping[CST_NB_CHUNKS_XZ];
    ChunkData cl_blocks[CST_NB_CHUNKS_XZ];
};

layout (binding = 0, rgba32f) uniform image2D out_uni_frame;

/* ************************************************************
 * > -5- main
 * ************************************************************/

#include cubetracer/shaders/ray_casting.comp
#include cubetracer/shaders/lightning.comp

void main() {
    const ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    const Ray ray = ray_make_from_pixel(vec2(pixel));
    vec4 color = vec4(trace_ray(ray), 1);

    color += imageLoad(out_uni_frame, pixel) * float(in_uni_iteration_id);
    imageStore(out_uni_frame, pixel, color / (in_uni_iteration_id + 1));
}
