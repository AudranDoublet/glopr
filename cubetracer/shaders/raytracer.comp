#version 430 core
#extension GL_ARB_gpu_shader_int64 : require

/* ************************************************************
 * > -0- Types
 * ************************************************************/

struct VirtualScreen {
    vec3 top_left;
    vec3 left, up; // normalized and scaled left/up screen axes
};

/* ************************************************************
 * > -1- Inputs
 * ************************************************************/

uniform VirtualScreen in_uni_screen;
uniform int in_uni_iteration_id;

uniform vec3 in_uni_origin; // camera origin
uniform ivec2 in_uni_cl_min_coords; // chunks min coord in 

uniform ivec3 in_uni_highlighted_block;

uniform vec3 in_uni_wind;
uniform float in_uni_time;

uniform int in_uni_enable_global_illum = 0;
uniform int in_uni_enable_ambient = 1;
uniform vec3 in_uni_sun_direction;
uniform vec3 in_uni_sun_direction_inv;

uniform sampler2DArray in_uni_textures;

/* ************************************************************
 * > -3- Includes
 * ************************************************************/

// 44
#include cubetracer/shaders/hyperparameters.comp
// 101
#include cubetracer/shaders/block_data.comp
// 25
#include cubetracer/shaders/ray.comp
// 131
#include cubetracer/shaders/block_intersection.comp

/* ************************************************************
 * > -4- Data
 * ************************************************************/

struct ChunkData {
    uint blocks[CST_CHUNK_WIDTH*CST_CHUNK_WIDTH*CST_CHUNK_HEIGHT];
    float grass_color[CST_CHUNK_WIDTH*CST_CHUNK_WIDTH][3];
};

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (std430) readonly buffer shader_data {
    uint cl_chunks_mapping[CST_NB_CHUNKS_XZ];
    ChunkData cl_blocks[CST_NB_CHUNKS_XZ];
};

layout (binding = 0, rgba32f) uniform restrict writeonly image2D out_uni_frame;
layout (binding = 1, rgba32f) uniform restrict image2D random_image;
layout (binding = 2, rgba32f) uniform restrict image2D cache_albedos;
layout (binding = 3, rgba32f) uniform restrict image2D cache_illum_direct;
layout (binding = 4, rgba32f) uniform restrict image2D cache_illum_indirect_sampling;
layout (binding = 5, rgba32f) uniform restrict image2D cache_intersections;
layout (binding = 6, rgba32f) uniform restrict image2D cache_normals;

/* ************************************************************
 * > -5- main
 * ************************************************************/

#include cubetracer/shaders/ray_casting.comp
#include cubetracer/shaders/lightning.comp

void renderGlobalIllum(const ivec2 pixel) {
    int64_t seed = int64_t(imageLoad(random_image, pixel).x * 255) + int64_t(in_uni_iteration_id) * 31;

    vec3 cAlbedo;
    vec3 cIllumDirect;
    vec3 cIllumIndirect;
    vec4 cIntersection;
    vec3 cNormal;

    if (in_uni_iteration_id == 0) {
        const Ray ray = ray_make_from_pixel(vec2(pixel));
        if (!trace_ray_direct_illumination(ray, cAlbedo, cIllumDirect, cIntersection.xyz, cNormal, cIntersection.w)) {
            cNormal = vec3(0);
            cIllumDirect = vec3(1);
            cIllumIndirect = vec3(0);
        } else {
            cIllumIndirect = trace_ray_indirect_illumination(seed, cIntersection.xyz, cNormal, cIntersection.w);
        }

        imageStore(cache_albedos, pixel, vec4(cAlbedo, 1));
        imageStore(cache_illum_direct, pixel, vec4(cIllumDirect, 1));
        imageStore(cache_intersections, pixel, cIntersection);
        imageStore(cache_normals, pixel, vec4(cNormal, 1));
    } else {
        cNormal = imageLoad(cache_normals, pixel).xyz;
        if (cNormal == vec3(0)) {
            // FIXME: free compute time => can be used to sample more rays for another pixel?
            return;
        }

        cAlbedo = imageLoad(cache_albedos, pixel).rgb;
        cIllumDirect = imageLoad(cache_illum_direct, pixel).rgb;
        cIllumIndirect = imageLoad(cache_illum_indirect_sampling, pixel).rgb;
        cIntersection = imageLoad(cache_intersections, pixel);

        cIllumIndirect += trace_ray_indirect_illumination(seed, cIntersection.xyz, cNormal, cIntersection.w);
    }

    imageStore(cache_illum_indirect_sampling, pixel, vec4(cIllumIndirect, 1));

    vec3 outColor = (cIllumDirect + cIllumIndirect * 2 / (in_uni_iteration_id + 1)) * cAlbedo;
    imageStore(out_uni_frame, pixel, vec4(outColor, 1));
}

void renderBasicIllum(const ivec2 pixel) {
    vec3 cAlbedo;
    vec3 cIllumDirect;
    vec4 cIntersection;
    vec3 cNormal;

    const Ray ray = ray_make_from_pixel(vec2(pixel));
    if (!trace_ray_direct_illumination(ray, cAlbedo, cIllumDirect, cIntersection.xyz, cNormal, cIntersection.w)) {
        cNormal = vec3(0);
        cIllumDirect = vec3(1);
    }

    imageStore(out_uni_frame, pixel, vec4(cIllumDirect * cAlbedo, 1));
}

void main() {
    const ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);

    if (in_uni_enable_global_illum == 0) {
        renderBasicIllum(pixel);
    } else {
        renderGlobalIllum(pixel);
    }
}
