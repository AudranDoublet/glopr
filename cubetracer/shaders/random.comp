#define GLUS_PI 3.1415926535897932384626433832795

const uint u_numberSamples = 64;
const uint u_m = 6;
const float u_binaryFractionFactor = 0.015873015873015872;

const int64_t RANDOM_N_A = int64_t(252149)*10000 + 3917;
const int64_t RANDOM_N_B = 11;

const int64_t RANDOM_IMAX = (1 << 48) - 1;
const float RANDOM_FMAX = float(1 << 48);

float randf(out int64_t seed) {
    seed = (RANDOM_N_A * seed + RANDOM_N_B) & RANDOM_IMAX;
    return float(seed) / RANDOM_FMAX;
}

vec2 rand2(out int64_t seed) {
    return vec2(randf(seed), randf(seed));
}

// see http://mathworld.wolfram.com/HammersleyPointSet.html
// see https://github.com/wdas/brdf/blob/master/src/shaderTemplates/brdfIBL.frag
vec2 hammersley(uint originalSample)
{
    uint revertSample;

    // Revert bits by swapping blockwise. Lower bits are moved up and higher bits down.
    revertSample = (originalSample << 16u) | (originalSample >> 16u);
    revertSample = ((revertSample & 0x00ff00ffu) << 8u) | ((revertSample & 0xff00ff00u) >> 8u);
    revertSample = ((revertSample & 0x0f0f0f0fu) << 4u) | ((revertSample & 0xf0f0f0f0u) >> 4u);
    revertSample = ((revertSample & 0x33333333u) << 2u) | ((revertSample & 0xccccccccu) >> 2u);
    revertSample = ((revertSample & 0x55555555u) << 1u) | ((revertSample & 0xaaaaaaaau) >> 1u);

    // Shift back, as only m bits are used.
    revertSample = revertSample >> (32 - u_m);

    return vec2(float(revertSample) * u_binaryFractionFactor, float(originalSample) * u_binaryFractionFactor);
}


// see Physically Based Rendering Chapter 13.6.1 and 13.6.3
vec3 cosineWeightedSampling(vec2 e) {
    float x = sqrt(1.0 - e.x) * cos(2.0*GLUS_PI*e.y);
    float y = sqrt(1.0 - e.x) * sin(2.0*GLUS_PI*e.y);
    float z = sqrt(e.x);

    return vec3(x, y, z);
}

// see http://www.scratchapixel.com/lessons/3d-advanced-lessons/things-to-know-about-the-cg-lighting-pipeline/what-is-a-brdf/
// see Physically Based Rendering Chapter 5.6.1, 13.2 and 13.6.3
// see Fundamentals of Computer Graphics Chapter 14.2 and 24.2
vec3 brdfLambert(vec2 randomPoint, mat3 basis) {
    vec3 LtangentSpace = cosineWeightedSampling(randomPoint);

    // Transform light ray to world space.
    return basis * LtangentSpace;
}

vec3 random_ray(out int64_t sampleIndex, vec3 normal) {
    vec3 tangent;

    if (abs(dot(normal, vec3(0.0, 1.0, 0.0))) < 1e-3)
        tangent = cross(normal, vec3(0.0, 0.0, 1.0));
    else
        tangent = cross(normal, vec3(0.0, 1.0, 0.0));

    vec3 bitangent = cross(normal, tangent);

    return brdfLambert(rand2(sampleIndex), mat3(tangent, bitangent, normal));
}

