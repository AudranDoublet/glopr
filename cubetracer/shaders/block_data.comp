struct Material {
    int type;
    int texture_coords[6];
};

#define TEX_UNIQUE(v) (v), (v), (v), (v), (v), (v)
#define TEX_COLUMN(v, w, z) (v), (w), (v), (v), (z), (v)
#define MATERIAL_EMPTY() Material(0, int[6]( TEX_UNIQUE(0) ))
#define MATERIAL_U(u) Material(1, int[6]( TEX_UNIQUE(u)) )
#define MATERIAL_U_NO_NORM(u) Material(2, int[6]( TEX_UNIQUE(u)) )
#define MATERIAL_PLANT(u) Material(3, int[6] (TEX_UNIQUE(u)))
#define MATERIAL_FLOWER(i) Material(3, int[6] (TEX_UNIQUE(FLOWER_TEX + i*2)))
#define MATERIAL_C(v, w, z) Material(1, int[6]( TEX_COLUMN(v, w, z) ))
#define MATERIAL_LOG(i) MATERIAL_C(LOGS_TEX + i*2, TOP_LOGS_TEX + i*2, TOP_LOGS_TEX + i*2)
#define MATERIAL_LEAVES(i) MATERIAL_U_NO_NORM(LEAVES_TEX + i)

#define STONE_TEX       0
#define DIRT_TEX        2
#define GRASS_TOP_TEX   4
#define GRASS_SIDE_TEX  6
#define SAND_TEX        8
#define SNOW_TEX        10
#define TALLGRASS_TEX   12
#define GRAVEL_TEX      14
#define CACTUS_TOP_TEX  16
#define CACTUS_SIDE_TEX 18
#define CACTUS_BOTT_TEX 20
#define LOGS_TEX        22
#define TOP_LOGS_TEX    34
#define LEAVES_TEX      46
#define FLOWER_TEX      52

const Material CST_BLOCK_MATERIALS[] = {
    MATERIAL_EMPTY(),
    MATERIAL_EMPTY(),                                               // 1-Water
    MATERIAL_U(STONE_TEX),                                          // 2-Stone
    MATERIAL_C(GRASS_SIDE_TEX, GRASS_TOP_TEX, DIRT_TEX),            // 3-Grass
    MATERIAL_U(DIRT_TEX),                                           // 4-Dirt
    MATERIAL_U(GRAVEL_TEX),                                         // 5-Gravel
    MATERIAL_U(SAND_TEX),                                           // 6-Sand
    MATERIAL_C(CACTUS_SIDE_TEX, CACTUS_TOP_TEX, CACTUS_BOTT_TEX),   // 7-Cactus
    MATERIAL_U(SNOW_TEX),                                           // 8-Snow
    MATERIAL_PLANT(TALLGRASS_TEX),                                  // 9-Tall grass
    MATERIAL_LOG(0),
    MATERIAL_LOG(1),
    MATERIAL_LOG(2),
    MATERIAL_LOG(3),
    MATERIAL_LOG(4),
    MATERIAL_LOG(5),
    MATERIAL_LEAVES(0),
    MATERIAL_LEAVES(1),
    MATERIAL_LEAVES(2),
    MATERIAL_LEAVES(3),
    MATERIAL_LEAVES(4),
    MATERIAL_LEAVES(5),
    MATERIAL_FLOWER(0),
    MATERIAL_FLOWER(1),
    MATERIAL_FLOWER(2),
    MATERIAL_FLOWER(3),
    MATERIAL_FLOWER(4),
    MATERIAL_FLOWER(5),
    MATERIAL_FLOWER(6),
    MATERIAL_FLOWER(7),
    MATERIAL_FLOWER(8),
    MATERIAL_FLOWER(9),
};

const mat3 CST_TEXTURE_NORMAL_TRANSFORMS[6] = {
    mat3( 0,-1, 0,   0, 0,-1,   1, 0, 0),
    mat3( 1, 0, 0,   0, 0,-1,   0, 1, 0),
    mat3(-1, 0, 0,   0,-1, 0,   0, 0, 1),
    mat3( 0, 1, 0,   0, 0,-1,  -1, 0, 0),
    mat3(-1, 0, 0,   0, 0,-1,   0,-1, 0),
    mat3( 1, 0, 0,   0,-1, 0,   0, 0,-1)
};

vec2 texture_coords(const ivec2 pos, const vec2 uv) {
    const vec2 size = vec2(1.0 / 8, 1.0 / 8); // FIXME remove hardcoded width/height
    return (pos + uv) * size;
}

vec4 texture_color(const int tex, const vec2 uv, const float t) {
    return textureLod(in_uni_textures, vec3(uv.x, uv.y, tex), t);
}

vec3 texture_normal(const int tex, const vec2 uv, const int face, const float t) {
    const vec4 color = textureLod(in_uni_textures, vec3(uv.x, uv.y, float(tex + 1)), t);
    const vec3 map_normal = color.rgb * 2 - vec3(1);

    return CST_TEXTURE_NORMAL_TRANSFORMS[face] * map_normal;
}

vec3 texture_normal(const int tex, vec2 uv, const float t, vec3 normal) {
    const vec3 tangeant = normalize(cross(normal, vec3(0.0, 1.0, 0.0)));
    const vec3 b = normalize(cross(normal, tangeant));

    const vec4 color = textureLod(in_uni_textures, vec3(uv.x, uv.y, float(tex + 1)), t);
    const vec3 map_normal = color.xyz * 2 - vec3(1);

    return mat3(tangeant, b, normal) * map_normal;
}
