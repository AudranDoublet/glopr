int estimate_max_iter(const Ray ray)
{
    float res = 1e100;

    if (ray.direction.x > 1e-5)
        res = min((float(CST_NB_BLOCKS_X) - ray.origin.x) * ray.direction_inv.x, res);
    else if (ray.direction.x < -1e-5)
        res = min(-ray.origin.x * ray.direction_inv.x, res);

    if (ray.direction.z > 1e-5)
        res = min((float(CST_NB_BLOCKS_X) - ray.origin.z) * ray.direction_inv.z, res);
    else if (ray.direction.z < -1e-5)
        res = min(-ray.origin.z * ray.direction_inv.z, res);

    if (ray.direction.y > 1e-5)
        res = min((float(CST_CHUNK_HEIGHT) - ray.origin.y) * ray.direction_inv.y, res);
    else if (ray.direction.y < -1e-5)
        res = min(-ray.origin.y * ray.direction_inv.y, res);

    vec3 dist = abs(ray.direction * res);
    return int(dist.x + dist.y + dist.z) - 1;
}

uint bl_value(const ivec3 block, out uint chunk_idx, out uint column_idx) {
    const uint a = (block.x >> 4) + (block.z >> 4) * CST_NB_CHUNKS_X;

    column_idx = (block.x & 15) | ((block.z & 15) << 4);
    chunk_idx = cl_chunks_mapping[a];

    return cl_blocks[chunk_idx].blocks[column_idx | (uint(block.y) << 8)];
}

#define DRAW_RAY_INIT(R)\
    vec3 _sgn = sign(R.direction);\
    vec3 _dt_dist = abs(R.direction_inv);\
    ivec3 block = ivec3(floor(R.origin));\
    ivec3 _steps = ivec3(_sgn);\
    vec3 _side_dist = (_sgn * (block - R.origin) + _sgn * 0.5 + 0.5) * _dt_dist;\
    vec3 _mask;\
    vec3 grass_color = vec3(0);\
    uint chunk_idx;\
    uint column_idx;\
    uint block_type = bl_value(block, chunk_idx, column_idx);\
    uint _i = 0;\
    uint _max_i = estimate_max_iter(R);\

#define DRAW_RAY_ITER(BLOCK_TYPE_TO_IGNORE, IGNORE_CURRENT_BLOCK, MAX_ITER, BOCK_ON_NON_INTERSECTION)\
    if (IGNORE_CURRENT_BLOCK)\
        block_type = BLOCK_TYPE_TO_IGNORE;\
    for (;_i < MAX_ITER && block_type == BLOCK_TYPE_TO_IGNORE && _i < _max_i; _i++) {\
        _mask = vec3(lessThanEqual(_side_dist.xyz, min(_side_dist.yzx, _side_dist.zxy)));\
        _side_dist += _mask * _dt_dist;\
        block += ivec3(_mask) * _steps;\
        block_type = bl_value(block, chunk_idx, column_idx);\
    }\
    if (_i >= _max_i || (block_type == BLOCK_TYPE_TO_IGNORE)) \
        {BOCK_ON_NON_INTERSECTION}

#define CAST_RAY(T_BASE, R, BLOCK_TYPE_TO_IGNORE, MAX_BLOCK_ITERATION, WITH_BLOCK_HIGHLIGHTING, BOCK_ON_NON_INTERSECTION, BOCK_ON_UV_COMPUTE, BOCK_ON_WATER_INTERSECTION, BOCK_ON_INTERSECTION)\
    DRAW_RAY_INIT(R);\
    DRAW_RAY_ITER(BLOCK_TYPE_TO_IGNORE, false, MAX_BLOCK_ITERATION, BOCK_ON_NON_INTERSECTION);\
    uint k = 0;\
    do {\
        float t;\
        int face = 0;\
        bool mustComputeIntersection = true;\
        bool mustComputeUv = true;\
        vec2 uv;\
        vec3 normal;\
        /* if uncertain of the box intersection because the box has special shapes, or is transparent,\
        we compute expensive intersections, and continue the ray till we're not sure we can get\
        an intersection with a box*/\
        for (uint j = 0; j < CST_MAX_ITER_UNCERTAIN_BLOCKS && !isIntersectionCertain(block_type); j++) {\
            if (CST_BLOCK_MATERIALS[block_type].type == 3 && plant_intersects(block, CST_BLOCK_MATERIALS[block_type].texture_coords[0], R, t, uv, normal)) {\
                mustComputeUv = false;\
                mustComputeIntersection = false;\
                break;\
            } else if (BBoxRayIntersectsUncertain(block + computeBlockOffsetBot(block_type), block + computeBlockOffsetTop(block_type), R, face, t)) {\
                mustComputeIntersection = false;\
                break;\
            }\
            DRAW_RAY_ITER(BLOCK_TYPE_TO_IGNORE, true, MAX_BLOCK_ITERATION, BOCK_ON_NON_INTERSECTION);\
        }\
        /* need to re-compute the intersection */\
        if (mustComputeIntersection) {\
            t = BBoxRayIntersects(block, block + vec3(1), R, face);\
        }\
        vec3 intersection = R.origin + R.direction * t;\
        if (block_type == CST_BLOCK_TYPE_WATER) {BOCK_ON_WATER_INTERSECTION}\
        if (mustComputeUv)\
            uv = bbox_uv(block, intersection, face);\
        {BOCK_ON_UV_COMPUTE}\
        int tex = CST_BLOCK_MATERIALS[block_type].texture_coords[face];\
        float t_qual = (t + T_BASE) / CST_TEXTURE_QUALITY_COEFF;\
        vec4 color = texture_color(tex, uv, t_qual);\
        if (color.a > 0.5)\
        {\
            if (block_type == 3 && face != 1 && face != 4) {\
                vec4 ocolor = texture_color(GRASS_OVER_TEX, uv, t_qual);\
                if (ocolor.a > 0.5)\
                {\
                    const float[3] v = cl_blocks[chunk_idx].grass_color[column_idx];\
                    grass_color = vec3(v[0], v[1], v[2]);\
                    color.xyz = ocolor.xyz * grass_color;\
                }\
            }\
            else if (CST_BLOCK_MATERIALS[block_type].apply_grass_color)\
            {\
                const float[3] v = cl_blocks[chunk_idx].grass_color[column_idx];\
                grass_color = vec3(v[0], v[1], v[2]);\
                color.xyz = color.xyz * grass_color;\
            }\
            switch (CST_BLOCK_MATERIALS[block_type].type)\
            {\
                case 1:\
                    normal = texture_normal(tex, uv, face, t_qual);\
                    break;\
                case 2:\
                    normal = CST_NORMAL_MAP[face];\
                    break;\
                case 3:\
                    normal = texture_normal(tex, uv, t_qual, normal);\
                    break;\
            }\
            {BOCK_ON_INTERSECTION;}\
        }\
        DRAW_RAY_ITER(BLOCK_TYPE_TO_IGNORE, true, MAX_BLOCK_ITERATION, BOCK_ON_NON_INTERSECTION);\
    } while (k++ < CST_MAX_ITER_TRANSPARENT);\
    {BOCK_ON_NON_INTERSECTION}

float distance_before_next_intersection(const Ray ray, const float dist) {
    DRAW_RAY_INIT(ray);
    DRAW_RAY_ITER(CST_BLOCK_TYPE_AIR, false, CST_MAX_ITER_SHADOW, {return 1000;});

    uint k = 0;
    do {
        float t;
        int face = 0;
        bool mustComputeIntersection = true;
        bool mustComputeUv = true;
        vec2 uv;

        vec3 normal;

        for (uint j = 0; j < CST_MAX_ITER_UNCERTAIN_BLOCKS && !isIntersectionCertain(block_type); j++) {
            if ((block_type == 9 || CST_BLOCK_MATERIALS[block_type].type == 4) && plant_intersects(block, CST_BLOCK_MATERIALS[block_type].texture_coords[0], ray, t, uv, normal)) {
                mustComputeUv = false;
                mustComputeIntersection = false;
                break;
            } else if (BBoxRayIntersectsUncertain(block + computeBlockOffsetBot(block_type), block + computeBlockOffsetTop(block_type), ray, face, t)) {
                mustComputeIntersection = false;
                break;
            }

            DRAW_RAY_ITER(CST_BLOCK_TYPE_AIR, true, CST_MAX_ITER_SHADOW, {return 1000;});
        }

        // need to re-compute the intersection
        if (mustComputeIntersection) {
            t = BBoxRayIntersects(block, block + vec3(1), ray, face);
        } 

        vec3 intersection = ray.origin + ray.direction * t;

        if (mustComputeUv)
            uv = bbox_uv(block, intersection, face);

        float t_qual = (t + dist / 3) / CST_TEXTURE_QUALITY_COEFF;
        int tex = CST_BLOCK_MATERIALS[block_type].texture_coords[face];
        vec4 color = texture_color(tex, uv, t_qual);

        if (color.a > 0.5)
            return t;

        DRAW_RAY_ITER(CST_BLOCK_TYPE_AIR, true, CST_MAX_ITER_SHADOW, {return 1000;});
    } while (k++ < CST_MAX_ITER_TRANSPARENT);

    return 1000;
}
