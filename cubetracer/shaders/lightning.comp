vec3 sky_color(const Ray r) {
    float sun = dot(CST_LIGHT_DIRECTION, normalize(r.direction));

    const vec3 color = vec3(0.149, 0.6471, 0.7961);
    const float coeff = abs(dot(r.direction, vec3(0, 1, 0))) * 0.2 + 0.8;

    if (sun < -0.99) {
        float sun_intensity = (abs(sun) - 0.99) * 100;
        sun_intensity = sqrt(sun_intensity);
        float sky_intensity = 1.0 - sun_intensity;

        return vec3(2.0, 2.0, 1.6) * sun_intensity + (color * coeff) * sky_intensity;
    }

    return color * coeff;
}

vec3 lightingWithoutShadows(vec3 origin, vec3 intersection, vec3 normal) {
    vec3 light_diffuse = CST_LIGHT_AMBIENT;
    light_diffuse = max(light_diffuse, dot(normal, -CST_LIGHT_DIRECTION));

    return light_diffuse;
}

vec3 lighting(vec3 origin, vec3 intersection, vec3 normal, float dist) {
    vec3 light_diffuse = CST_LIGHT_AMBIENT;
    float lightingIntensity = dot(normal, -CST_LIGHT_DIRECTION);

    if (CST_SHADOW_ACTIVATED) {
        if (lightingIntensity < CST_MIN_LIGHTNING_INTENSITY) {
            lightingIntensity = 0.0;
        } else {
            intersection += normal * CST_EPSILON;
            Ray shadow_ray = Ray(intersection, -CST_LIGHT_DIRECTION, -CST_LIGHT_DIRECTION_INV);
            lightingIntensity = lightingIntensity * float(distance_before_next_intersection(shadow_ray, dist) >= CST_MAX_ITER_SHADOW);
        }
    }

    light_diffuse = max(light_diffuse, lightingIntensity);

    if (CST_SPECULAR_ACTIVATED) {
        vec3 h = normalize(CST_LIGHT_DIRECTION + origin - intersection);
        float specular_intensity = pow(max(dot(normal, h), 0.0), CST_SPECULAR_SHININESS);
        light_diffuse += vec3(specular_intensity);
    }

    return light_diffuse;
}

#define R0 ((1 - CST_WATER_IOR) / (1 + CST_WATER_IOR)) * ((1 - CST_WATER_IOR) / (1 + CST_WATER_IOR))
float fresnelFromWater(vec3 incident, vec3 normal) {
    const float r0 = R0;
    float cos_i = max(0.0, dot(normal, incident));
    const float sin_t2 = CST_WATER_IOR * CST_WATER_IOR * (1.0 - cos_i * cos_i);
    if (sin_t2 > 1.0) return 1.0;
    cos_i = sqrt(1.0 - sin_t2);
    const float x  = 1.0 - cos_i;
    return r0 + (1.0 - r0) * x * x * x * x * x;
}

float fresnelFromAir(vec3 incident, vec3 normal) {
    const float r0 = R0;
    const float x  = 1.0 - max(0.0, dot(normal, incident));
    return r0 + (1.0 - r0) * x * x * x * x * x;
}
#undef R0

vec3 lightingJunctureReflectionFromWater(const vec3 LWR_intersection, const vec3 LWR_incident, const vec3 LWR_normal, const float LWR_acc_dist) {
    const Ray ray = ray_make(LWR_intersection, reflect(LWR_incident, LWR_normal));
    DRAW_RAY_INIT(ray);
    CAST_RAY_INTO_WATER(ray, LWR_acc_dist, CST_MAX_ITER_RAY_WATER, false, {
        return vec3(0.0, 0.01, 0.2);
    }, {}, { return vec3(1, 0, 0); }, { return CST_BLOCK_MATERIALS[block_type].color; }, {
        return lightingWithoutShadows(ray.origin, intersection, normal) * color.rgb;
    });
}

vec3 lightingJunctureReflectionFromAir(const vec3 LWR_intersection, const vec3 LWR_incident, const vec3 LWR_normal, const float LWR_acc_dist) {
    const Ray ray = ray_make(LWR_intersection, reflect(LWR_incident, LWR_normal));
    DRAW_RAY_INIT(ray);
    CAST_RAY_INTO_AIR(ray, LWR_acc_dist, CST_MAX_ITER_RAY_AIR, false, {
        return sky_color(ray);
    }, {}, { return vec3(1, 0, 0); }, {return CST_BLOCK_MATERIALS[block_type].color;}, {
        return lightingWithoutShadows(ray.origin, intersection, normal) * color.rgb;
    });
}

vec3 lightingJunctureRefractionFromWater(const vec3 LWR_intersection, const vec3 LWR_incident, const vec3 LWR_normal, const float LWR_acc_dist) {
    const Ray ray = ray_make(LWR_intersection, refract(LWR_incident, LWR_normal, CST_WATER_IOR));
    DRAW_RAY_INIT(ray);
    CAST_RAY_INTO_AIR(ray, LWR_acc_dist, CST_MAX_ITER_RAY_AIR, false, {
        return sky_color(ray);
    }, {}, { return vec3(1, 0, 0); }, {return CST_BLOCK_MATERIALS[block_type].color;}, {
        vec3 outColor = lightingWithoutShadows(ray.origin, intersection, normal) * color.rgb;
        if (CST_USE_BEER_ATTENUATION)
            outColor *= exp(-CST_WATER_TRANSMITTANCE * LWR_acc_dist);
        return outColor;
    });
}

vec3 lightingJunctureRefractionFromAir(const vec3 LWR_intersection, const vec3 LWR_incident, const vec3 LWR_normal, const float LWR_acc_dist) {
    const Ray ray = ray_make(LWR_intersection, refract(LWR_incident, LWR_normal, 1/CST_WATER_IOR));
    DRAW_RAY_INIT(ray);
    CAST_RAY_INTO_WATER(ray, LWR_acc_dist, CST_MAX_ITER_RAY_WATER, false, {
        return vec3(0.0, 0.01, 0.2);
    }, {}, { return vec3(1, 0, 0); }, { return CST_BLOCK_MATERIALS[block_type].color; }, {
        vec3 outColor = lightingWithoutShadows(ray.origin, intersection, normal) * color.rgb;
        if (CST_USE_BEER_ATTENUATION)
            outColor *= exp(-CST_WATER_TRANSMITTANCE * t);
        return outColor;
    });
}

vec3 lightingJunctureFromWater(const vec3 intersection, const vec3 lwNormal, const vec3 incident, const float acc_dist) {
    const float coeffReflectivity = fresnelFromWater(incident, -lwNormal);

    vec3 outColor = lightingJunctureReflectionFromWater(intersection, incident, lwNormal, acc_dist);

    if (coeffReflectivity < 0.99) {
        vec3 colorRefract = lightingJunctureRefractionFromWater(intersection, incident, lwNormal, acc_dist);
        outColor = coeffReflectivity * outColor + (1.0 - coeffReflectivity) * colorRefract;
    }

    return outColor;
}

vec3 lightingJunctureFromAir(const vec3 intersection, const vec3 lwNormal, const vec3 incident, const float acc_dist) {
    const float coeffReflectivity = fresnelFromAir(incident, -lwNormal);

    vec3 outColor = lightingJunctureReflectionFromAir(intersection, incident, lwNormal, acc_dist);

    if (coeffReflectivity < 0.99) {
        vec3 colorRefract = lightingJunctureRefractionFromAir(intersection, incident, lwNormal, acc_dist);
        outColor = coeffReflectivity * outColor + (1.0 - coeffReflectivity) * colorRefract;
    }

    return outColor;
}

bool isHighlighting(ivec3 block, vec2 uv) {
    return block == in_uni_highlighted_block && (uv.x < 0.005 || uv.x > 0.995 || uv.y < 0.005 || uv.y > 0.995);
}

#include cubetracer/shaders/random.comp

bool trace_ray_direct_illumination(const Ray ray, out vec3 out_hitAlbedo, out vec3 out_hitDirectIllum, out vec3 out_hitIntersection, out vec3 out_hitNormal) {
    DRAW_RAY_INIT(ray);

    if (block_type == CST_BLOCK_TYPE_WATER) {
        CAST_RAY_INTO_WATER(ray, 0.0, CST_MAX_ITER_RAY_WATER, true, {
            out_hitAlbedo = vec3(0.00, 0., 0.02);
            return false;
        }, {
            if (isHighlighting(block, uv)) {
                out_hitAlbedo = vec3(0.8);
                return false;
            }
        }, {
            //vec3 lwNormal = -water_normal(intersection);
            vec3 lwNormal = vec3(0, -1, in_uni_time * 1e-15);
            out_hitAlbedo = lightingJunctureFromWater(intersection, lwNormal, ray.direction, t);
            return false;
        }, {
            out_hitAlbedo = CST_BLOCK_MATERIALS[block_type].color;
            return false;
        }, {
            out_hitAlbedo = color.rgb;
            out_hitDirectIllum = lighting(ray.origin, intersection, normal, t);
            if (CST_USE_BEER_ATTENUATION)
                out_hitDirectIllum *= exp(-CST_WATER_TRANSMITTANCE * t);
            out_hitIntersection = intersection;
            out_hitNormal = normal;
            return true;
        });
    } else {
        CAST_RAY_INTO_AIR(ray, 0.0, CST_MAX_ITER_RAY_AIR, true, {
            out_hitAlbedo = sky_color(ray);
            return false;
        }, { 
            if (isHighlighting(block, uv)) {
                out_hitAlbedo = vec3(0.5);
                return false;
            }
        }, {
            //vec3 lwNormal = water_normal(intersection);
            vec3 lwNormal = vec3(0,1,0);
            out_hitAlbedo = lightingJunctureFromAir(intersection, lwNormal, ray.direction, t);
            return false;
        },{
            out_hitAlbedo = CST_BLOCK_MATERIALS[block_type].color;
            return false;
        } ,{
            out_hitAlbedo = color.rgb;
            out_hitDirectIllum = lighting(ray.origin, intersection, normal, t);
            out_hitIntersection = intersection;
            out_hitNormal = normal;
            return true;
        });
    }
}

mat3 trace_ray_reflection(const Ray ray, inout bool out_hitLight) {
    DRAW_RAY_INIT(ray);

    if (block_type == CST_BLOCK_TYPE_WATER) {
        CAST_RAY_INTO_WATER(ray, 0.0, CST_MAX_ITER_RAY_WATER, true, {
            return mat3(0);
        }, {}, {
            vec3 lwNormal = -water_normal(intersection);
            vec3 outColor = lightingJunctureFromWater(intersection, lwNormal, ray.direction, t);
            return mat3(outColor, intersection, lwNormal);
        }, {
            out_hitLight = true;
            return mat3(CST_BLOCK_MATERIALS[block_type].color, vec3(t), vec3(0));
        }, {
            vec3 outColor = lighting(ray.origin, intersection, normal, t) * color.rgb;
            if (CST_USE_BEER_ATTENUATION)
                outColor *= exp(-CST_WATER_TRANSMITTANCE * t);
            return mat3(outColor, intersection, normal);
        });
    } else {
        CAST_RAY_INTO_AIR(ray, 0.0, CST_MAX_ITER_RAY_AIR, false, {
            return mat3(0);
        }, {}, {
            vec3 lwNormal = water_normal(intersection);
            vec3 outColor = lightingJunctureFromAir(intersection, lwNormal, ray.direction, t);
            return mat3(outColor, intersection, lwNormal);
        }, {
            out_hitLight = true;
            return mat3(CST_BLOCK_MATERIALS[block_type].color, vec3(t), vec3(0));
        }, {
            vec3 outColor = lighting(ray.origin, intersection, normal, t) * color.rgb;
            return mat3(outColor, intersection, normal);
        });
    }
}

#define CST_MAX_BOUNCE 4
#define CST_RAY_REFLECTANCE 0.3
vec3 trace_ray_indirect_illumination(out int64_t seed, vec3 trii_intersection, vec3 trii_normal) {
    vec3 illum = vec3(0);
    float coeffIllumLoss = CST_RAY_REFLECTANCE;

    for (uint i = 0; i < CST_MAX_BOUNCE; i ++) {
        Ray ray = ray_make(trii_intersection, random_ray(seed, trii_normal));

        bool rayHasHittenLight = false;
        mat3 rayRefectionHit = trace_ray_reflection(ray, rayHasHittenLight);

        if (rayHasHittenLight) {
            illum += rayRefectionHit[0] / (rayRefectionHit[1].r + 0.5);
            break;
        }

        illum += coeffIllumLoss * rayRefectionHit[0];
        trii_intersection = rayRefectionHit[1];
        trii_normal = rayRefectionHit[2];

        if (trii_normal == vec3(0))
            break;

        coeffIllumLoss *= CST_RAY_REFLECTANCE;
    }

    return illum;
}
#undef CST_MAX_BOUNCE

